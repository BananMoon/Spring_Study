plugins {
	id 'org.springframework.boot' version '2.6.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}
ext["hibernate.version"] = "5.6.5.Final"

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//테스트에서 lombok 사용
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	//JdbcTemplate 추가 (JPA 추가하면 해당 의존성은 제거해도 된다)
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	//H2 데이터베이스 추가 (클라이언트 라이브러리)
	runtimeOnly 'com.h2database:h2'
	// MyBatis 추가 : Spring이 공식적으로 관리하지 않아서 버전정보 별도 추가 필요 (MyBatis에서 만듦)
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.0'
	//JPA, 스프링 데이터 JPA 추가
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// QueryDsl 추가
	implementation 'com.querydsl:querydsl-jpa'
	// Q엔티티 생성을 위한 처리기
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
	useJUnitPlatform()
}

// Querydsl 추가, 자동 생성된 Q클래스는 gradle clean 시 함께 제거
clean {
	delete file('src/main/generated')
}